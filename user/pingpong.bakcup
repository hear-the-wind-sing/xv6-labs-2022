#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int 
main(int argc, char *argv[])
{
  char buf[]= {'a'};
  int rc=fork();
  int p[2];
  pipe(p);
  if (rc == 0) {  // child 
   // if(read(p[0], buf, 1) != 1)  
   // {
    //  fprintf(2, "failed to read in child\n");
    //  exit(1);
   // }
    read(p[0],buf,1);
    close(p[0]);
    printf("%d: received ping\n", (int) getpid());
    //if(write(p[1], buf, 1) != 1)
    //{
    //  fprintf(2, "failed to write in child\n");
    //  exit(1);
    //}
    write(p[1],buf,1);
    close(p[1]);
    exit(0);
  } else {   // parent
    //if(write(p[1], buf, 1) != 1)
    //{
    //  fprintf(2, "failed to write in parent\n");
    //  exit(1);
   // }
    write(p[1],buf,1);
    close(p[1]);
    //if(read(p[0], buf, 1) != 1)
    //{
    //  fprintf(2, "failed to read in parent\n");
    //  exit(1);
    //}
    read(p[0],buf,1);
    printf("%d: received pong\n", (int) getpid());
    close(p[0]);
    exit(0);
  }
}


// correct

#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int main(int argc, char const *argv[])
{
	int pid;
	int p[2];
	pipe(p);
	char buf[] = {'a'};
	if (fork() == 0) // child (receive -> send)
	{
		pid = getpid();
		if (read(p[0], buf, 1) != 1)
		{
			fprintf(2, "failed to read in child\n");
			exit(1);
		}
		close(p[0]);
		printf("%d: received ping\n", pid);
		if(write(p[1], buf, 1) != 1)
		{
			fprintf(2, "failed to write in child\n");
			exit(1);
		}
		close(p[1]);
		exit(0);
	}else{			// parent (send -> receive)
		pid = getpid();
		if (write(p[1], buf, 1) != 1)
		{
			fprintf(2, "failed to write in parent\n");
			exit(1);
		}
		// wait for child to receive ping
		close(p[1]);
		//wait(0);
		if(read(p[0], buf, 1) != 1){
			fprintf(2, "failed to read in parent\n");
			exit(1);
		}
		printf("%d: received pong\n", pid);
		close(p[0]);
		exit(0);
	}
}


// correct 2
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int 
main(int argc, char *argv[])
{
  char buf[]= {'a'};
  int p[2];
  //int rc=fork();
  pipe(p);
 // if (rc < 0){
    // fprintf(2, "failed to fork\n");
    // exit(1);
  //}
  if ( fork() == 0) {  // child 
    if(read(p[0], buf, 1) != 1)  
    {
      fprintf(2, "failed to read in child\n");
      exit(1);
    }
    close(p[0]);
    printf("%d: received ping\n", (int) getpid());
    if(write(p[1], buf, 1) != 1)
    {
     fprintf(2, "failed to write in child\n");
      exit(1);
    }
    close(p[1]);
    exit(0);
  } else {   // parent
    if(write(p[1], buf, 1) != 1)
    {
     fprintf(2, "failed to write in parent\n");
      exit(1);
    }
    close(p[1]);
    if(read(p[0], buf, 1) != 1)
    {
      fprintf(2, "failed to read in parent\n");
      exit(1);
    }
    printf("%d: received pong\n", (int) getpid());
    close(p[0]);
    exit(0);
  }
}

// incorrect
#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

int 
main(int argc, char *argv[])
{
  char buf[]= {'a'};
  int p[2];
  int rc=fork();
  pipe(p);
  if (rc < 0){
     fprintf(2, "failed to fork\n");
     exit(1);
  }
  else if ( rc == 0) {  // child 
    
    if(read(p[0], buf, 1) != 1)  
    {
      fprintf(2, "failed to read in child\n");
      exit(1);
    }
    close(p[0]);
    printf("%d: received ping\n", (int) getpid());
    if(write(p[1], buf, 1) != 1)
    {
     fprintf(2, "failed to write in child\n");
      exit(1);
    }
    close(p[1]);
    exit(0);
  } else {   // parent
    if(write(p[1], buf, 1) != 1)
    {
     fprintf(2, "failed to write in parent\n");
      exit(1);
    }
    close(p[1]);
    if(read(p[0], buf, 1) != 1)
    {
      fprintf(2, "failed to read in parent\n");
      exit(1);
    }
    printf("%d: received pong\n", (int) getpid());
    close(p[0]);
    exit(0);
  }
}
